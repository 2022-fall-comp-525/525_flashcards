export let cardLibrary = {
    1: [
        new Card('abstract data type (ADT)', ' An abstract data type, sometimes abbreviated ADT, is a logical description of how we view the data and the operations that are allowed without regard to how they will be implemented'),
        new Card('abstraction', 'Abstraction allows us to view the problem and solution in such a way as to separate the so-called logical and physical perspectives.'),
        new Card('algorithm', 'Step-by-step list of instructions for solving any instance of the problem that might arise.'),
        new Card('class', 'In Python, as well as in any other object-oriented programming language, we define a class to be a description of what the data look like (the state) and what the data can do (the behavior).'),
        new Card('computable', 'We say that a problem is computable if an algorithm exists for solving it'),
        new Card('data abstraction', 'Data abstraction refers to providing only essential information to the outside world and hiding their background details, i.e., to represent the needed information in program without presenting the details. Data abstraction is a programming (and design) technique that relies on the separation of interface and implementation.'),
        new Card('data structure', 'The implementation of an abstract data type, often referred to as a data structure, will require that we provide a physical view of the data using some collection of programming constructs and primitive data types.'),
        new Card('data type', 'All data items in the computer are represented as strings of binary digits. In order to give these strings meaning, we need to have data types. Data types provide an interpretation for this binary data so that we can think about the data in terms that make sense with respect to the problem being solved. These low-level, built-in data types (sometimes called the primitive data types) provide the building blocks for algorithm development.'),
        new Card('deep equality', 'deep equality - equality by the same value, not the same reference'),
        new Card('dictionary', 'Dictionaries are collections of associated pairs of items where each pair consists of a key and a value. This key-value pair is typically written as key:value. Dictionaries are written as comma-delimited key:value pairs enclosed in curly braces.'),
        new Card('encapsulation', 'Encapsulation refers to the bundling of data with the methods that operate on that data, or the restricting of direct access to some of an object\'s components'),
        new Card('exception', 'In some cases, logic errors lead to very bad situations such as trying to divide by zero or trying to access an item in a list where the index of the item is outside the bounds of the list. In this case, the logic error leads to a runtime error that causes the program to terminate. These types of runtime errors are typically called exceptions.'),
        new Card('f-string', 'Python 3.6 introduced f-strings, a way to use proper variable names instead of placeholders.'),
        new Card('format operator', 'The % operator is a string operator called the format operator. The left side of the expression holds the template or format string, and the right side holds a collection of values that will be substituted into the format string. '),
        new Card('formatted strings', 'It is often useful to have more control over the look of your output. Fortunately, Python provides us with an alternative called formatted strings. A formatted string is a template in which words or spaces that will remain constant are combined with placeholders for variables that will be inserted into the string.'),
        new Card('Has-a relationship', 'has-a is a composition relationship where one object "belongs to" another object, and behaves according to the rules of ownership.'),
        new Card('implementation-independent', 'Describing the interface and operations of something outside the context of an individual programming language.'),
        new Card('inheritance', 'Inheritance is the ability of one class to be related to another class in much the same way that people can be related to one another. Children inherit characteristics from their parents. Similarly, Python child classes can inherit characteristic data and behavior from a parent class. These classes are often referred to as subclasses and superclasses.'),
        new Card('inheritance hierarchy', 'The manner in which inheritance applies across super/sub classes. For example, the list is a child of the sequential collection. See 1.13.2'),
        new Card('interface', 'From an abstraction point of view, we can say that you are seeing the logical perspective of the car. You are using the functions provided by the vehicle designers for the purpose of transporting you from one location to another. These functions are sometimes also referred to as the interface.'),
        new Card('Is-a relationship', 'For example, the list is a child of the sequential collection. In this case, we call the list the child and the sequence the parent (or subclass list and superclass sequence). This is often referred to as an Is-a relationship (the list Is-a sequential collection).'),
        new Card('list', 'A list is an ordered collection of zero or more references to Python data objects. Lists are written as comma-delimited values enclosed in square brackets. The empty list is simply [ ]. Lists are heterogeneous, meaning that the data objects need not all be from the same class and the collection can be assigned to a variable as below. '),
        new Card('list comprehension', 'List comprehension offers a shorter syntax when you want to create a new list based on the values of an existing list.'),
        new Card('method', 'Remember that we use abstract data types to provide the logical description of what a data object looks like (its state) and what it can do (its methods). '),
        new Card('mutability', 'A major difference between lists and strings is that lists can be modified while strings cannot. This is referred to as mutability. Lists are mutable; strings are immutable. For example, you can change an item in a list by using indexing and assignment. With a string that change is not allowed, as shown below.'),
        new Card('object', 'Data items are called objects in the object-oriented paradigm. An object is an instance of a class.'),
        new Card('override', 'This implementation overrides the previous one, or that it redefines the method\'s behavior.'),
        new Card('procedural abstraction', 'We do not necessarily know how the underlying function works, but we know what the function is called and how to use it. '),
        new Card('programming', 'Programming is the process of taking an algorithm and encoding it into a notation, a programming language, so that it can be executed by a computer.'),
        new Card('prompt', 'Python\'s function input takes a single parameter that is a string. This string is often called the prompt because it contains some helpful text prompting the user to enter something.'),
        new Card('self', 'self represents the instance (object) of the class. By using the “self” we can access the attributes and methods of the object'),
        new Card('set', 'A set is an unordered collection of zero or more immutable Python data objects. Sets do not allow duplicates and are written as comma-delimited values enclosed in curly braces. The empty set is represented by set(). Sets are heterogeneous, and the collection can be assigned to a variable as below.'),
        new Card('shallow equality', 'shallow equality - equality by the same reference'),
        new Card('string', 'Strings are sequential collections of zero or more letters, numbers, and other symbols. We call these letters, numbers, and other symbols characters. Literal string values are differentiated from identifiers by using quotation marks (either single or double).'),
        new Card('subclass', 'Inheritance is the ability of one class to be related to another class in much the same way that people can be related to one another. Children inherit characteristics from their parents. Similarly, Python child classes can inherit characteristic data and behavior from a parent class. These classes are often referred to as subclasses and superclasses.'),
        new Card('superclass', 'Inheritance is the ability of one class to be related to another class in much the same way that people can be related to one another. Children inherit characteristics from their parents. Similarly, Python child classes can inherit characteristic data and behavior from a parent class. These classes are often referred to as subclasses and superclasses.'),
        new Card('truth table', 'Table of values showing the input-to-output mapping'),
        new Card('tuple', 'Tuples are very similar to lists in that they are heterogeneous sequences of data. The difference is that a tuple is immutable, like a string. A tuple cannot be changed. Tuples are written as comma-delimited values enclosed in parentheses.'),
    ]
}
